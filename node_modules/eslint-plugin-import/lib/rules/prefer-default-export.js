'use strict';

module.exports = function (context) {
  var specifierExportCount = 0;
  var hasDefaultExport = false;
  var hasStarExport = false;
  var namedExportNode = null;

  return {
    'ExportSpecifier': function ExportSpecifier(node) {
      if (node.exported.name === 'default') {
        hasDefaultExport = true;
      } else {
        specifierExportCount++;
        namedExportNode = node;
      }
    },

    'ExportNamedDeclaration': function ExportNamedDeclaration(node) {
      // if there are specifiers, node.declaration should be null
      if (!node.declaration) return;

      function captureDeclaration(identifierOrPattern) {
        if (identifierOrPattern.type === 'ObjectPattern') {
          // recursively capture
          identifierOrPattern.properties.forEach(function (property) {
            captureDeclaration(property.value);
          });
        } else {
          // assume it's a single standard identifier
          specifierExportCount++;
        }
      }

      if (node.declaration.declarations) {
        node.declaration.declarations.forEach(function (declaration) {
          captureDeclaration(declaration.id);
        });
      } else {
        // captures 'export function foo() {}' syntax
        specifierExportCount++;
      }

      namedExportNode = node;
    },

    'ExportDefaultDeclaration': function ExportDefaultDeclaration() {
      hasDefaultExport = true;
    },

    'ExportAllDeclaration': function ExportAllDeclaration() {
      hasStarExport = true;
    },

    'Program:exit': function ProgramExit() {
      if (specifierExportCount === 1 && !hasDefaultExport && !hasStarExport) {
        context.report(namedExportNode, 'Prefer default export.');
      }
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL3ByZWZlci1kZWZhdWx0LWV4cG9ydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsVUFBUyxPQUFULEVBQWtCO0FBQ2pDLE1BQUksdUJBQXVCLENBQXZCLENBRDZCO0FBRWpDLE1BQUksbUJBQW1CLEtBQW5CLENBRjZCO0FBR2pDLE1BQUksZ0JBQWdCLEtBQWhCLENBSDZCO0FBSWpDLE1BQUksa0JBQWtCLElBQWxCLENBSjZCOztBQU1qQyxTQUFPO0FBQ0wsdUJBQW1CLHlCQUFTLElBQVQsRUFBZTtBQUNoQyxVQUFJLEtBQUssUUFBTCxDQUFjLElBQWQsS0FBdUIsU0FBdkIsRUFBa0M7QUFDcEMsMkJBQW1CLElBQW5CLENBRG9DO09BQXRDLE1BRU87QUFDTCwrQkFESztBQUVMLDBCQUFrQixJQUFsQixDQUZLO09BRlA7S0FEaUI7O0FBU25CLDhCQUEwQixnQ0FBUyxJQUFULEVBQWU7O0FBRXZDLFVBQUksQ0FBQyxLQUFLLFdBQUwsRUFBa0IsT0FBdkI7O0FBRUEsZUFBUyxrQkFBVCxDQUE0QixtQkFBNUIsRUFBaUQ7QUFDL0MsWUFBSSxvQkFBb0IsSUFBcEIsS0FBNkIsZUFBN0IsRUFBOEM7O0FBRWhELDhCQUFvQixVQUFwQixDQUNHLE9BREgsQ0FDVyxVQUFTLFFBQVQsRUFBbUI7QUFDMUIsK0JBQW1CLFNBQVMsS0FBVCxDQUFuQixDQUQwQjtXQUFuQixDQURYLENBRmdEO1NBQWxELE1BTU87O0FBRUwsaUNBRks7U0FOUDtPQURGOztBQWFBLFVBQUksS0FBSyxXQUFMLENBQWlCLFlBQWpCLEVBQStCO0FBQ2pDLGFBQUssV0FBTCxDQUFpQixZQUFqQixDQUE4QixPQUE5QixDQUFzQyxVQUFTLFdBQVQsRUFBc0I7QUFDMUQsNkJBQW1CLFlBQVksRUFBWixDQUFuQixDQUQwRDtTQUF0QixDQUF0QyxDQURpQztPQUFuQyxNQUtLOztBQUVILCtCQUZHO09BTEw7O0FBVUEsd0JBQWtCLElBQWxCLENBM0J1QztLQUFmOztBQThCMUIsZ0NBQTRCLG9DQUFXO0FBQ3JDLHlCQUFtQixJQUFuQixDQURxQztLQUFYOztBQUk1Qiw0QkFBd0IsZ0NBQVc7QUFDakMsc0JBQWdCLElBQWhCLENBRGlDO0tBQVg7O0FBSXhCLG9CQUFnQix1QkFBVztBQUN6QixVQUFJLHlCQUF5QixDQUF6QixJQUE4QixDQUFDLGdCQUFELElBQXFCLENBQUMsYUFBRCxFQUFnQjtBQUNyRSxnQkFBUSxNQUFSLENBQWUsZUFBZixFQUFnQyx3QkFBaEMsRUFEcUU7T0FBdkU7S0FEYztHQWhEbEIsQ0FOaUM7Q0FBbEIiLCJmaWxlIjoicnVsZXMvcHJlZmVyLWRlZmF1bHQtZXhwb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29udGV4dCkge1xuICBsZXQgc3BlY2lmaWVyRXhwb3J0Q291bnQgPSAwXG4gIGxldCBoYXNEZWZhdWx0RXhwb3J0ID0gZmFsc2VcbiAgbGV0IGhhc1N0YXJFeHBvcnQgPSBmYWxzZVxuICBsZXQgbmFtZWRFeHBvcnROb2RlID0gbnVsbFxuXG4gIHJldHVybiB7XG4gICAgJ0V4cG9ydFNwZWNpZmllcic6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmV4cG9ydGVkLm5hbWUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICBoYXNEZWZhdWx0RXhwb3J0ID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BlY2lmaWVyRXhwb3J0Q291bnQrK1xuICAgICAgICBuYW1lZEV4cG9ydE5vZGUgPSBub2RlXG4gICAgICB9XG4gICAgfSxcblxuICAgICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJzogZnVuY3Rpb24obm9kZSkge1xuICAgICAgLy8gaWYgdGhlcmUgYXJlIHNwZWNpZmllcnMsIG5vZGUuZGVjbGFyYXRpb24gc2hvdWxkIGJlIG51bGxcbiAgICAgIGlmICghbm9kZS5kZWNsYXJhdGlvbikgcmV0dXJuXG5cbiAgICAgIGZ1bmN0aW9uIGNhcHR1cmVEZWNsYXJhdGlvbihpZGVudGlmaWVyT3JQYXR0ZXJuKSB7XG4gICAgICAgIGlmIChpZGVudGlmaWVyT3JQYXR0ZXJuLnR5cGUgPT09ICdPYmplY3RQYXR0ZXJuJykge1xuICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNhcHR1cmVcbiAgICAgICAgICBpZGVudGlmaWVyT3JQYXR0ZXJuLnByb3BlcnRpZXNcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIGNhcHR1cmVEZWNsYXJhdGlvbihwcm9wZXJ0eS52YWx1ZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFzc3VtZSBpdCdzIGEgc2luZ2xlIHN0YW5kYXJkIGlkZW50aWZpZXJcbiAgICAgICAgICBzcGVjaWZpZXJFeHBvcnRDb3VudCsrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUuZGVjbGFyYXRpb24uZGVjbGFyYXRpb25zKSB7XG4gICAgICAgIG5vZGUuZGVjbGFyYXRpb24uZGVjbGFyYXRpb25zLmZvckVhY2goZnVuY3Rpb24oZGVjbGFyYXRpb24pIHtcbiAgICAgICAgICBjYXB0dXJlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24uaWQpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gY2FwdHVyZXMgJ2V4cG9ydCBmdW5jdGlvbiBmb28oKSB7fScgc3ludGF4XG4gICAgICAgIHNwZWNpZmllckV4cG9ydENvdW50KytcbiAgICAgIH1cblxuICAgICAgbmFtZWRFeHBvcnROb2RlID0gbm9kZVxuICAgIH0sXG5cbiAgICAnRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uJzogZnVuY3Rpb24oKSB7XG4gICAgICBoYXNEZWZhdWx0RXhwb3J0ID0gdHJ1ZVxuICAgIH0sXG5cbiAgICAnRXhwb3J0QWxsRGVjbGFyYXRpb24nOiBmdW5jdGlvbigpIHtcbiAgICAgIGhhc1N0YXJFeHBvcnQgPSB0cnVlXG4gICAgfSxcblxuICAgICdQcm9ncmFtOmV4aXQnOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzcGVjaWZpZXJFeHBvcnRDb3VudCA9PT0gMSAmJiAhaGFzRGVmYXVsdEV4cG9ydCAmJiAhaGFzU3RhckV4cG9ydCkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydChuYW1lZEV4cG9ydE5vZGUsICdQcmVmZXIgZGVmYXVsdCBleHBvcnQuJylcbiAgICAgIH1cbiAgICB9LFxuICB9XG59XG4iXX0=