'use strict';

var _containsPath = require('contains-path');

var _containsPath2 = _interopRequireDefault(_containsPath);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('../core/resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _staticRequire = require('../core/staticRequire');

var _staticRequire2 = _interopRequireDefault(_staticRequire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function noRestrictedPaths(context) {
  var options = context.options[0] || {};
  var restrictedPaths = options.zones || [];
  var basePath = options.basePath || process.cwd();
  var currentFilename = context.getFilename();
  var matchingZones = restrictedPaths.filter(function (zone) {
    var targetPath = _path2.default.resolve(basePath, zone.target);

    return (0, _containsPath2.default)(currentFilename, targetPath);
  });

  function checkForRestrictedImportPath(importPath, node) {
    var absoluteImportPath = (0, _resolve2.default)(importPath, context);

    if (!absoluteImportPath) {
      return;
    }

    matchingZones.forEach(function (zone) {
      var absoluteFrom = _path2.default.resolve(basePath, zone.from);

      if ((0, _containsPath2.default)(absoluteImportPath, absoluteFrom)) {
        context.report({
          node: node,
          message: 'Unexpected path "' + importPath + '" imported in restricted zone.'
        });
      }
    });
  }

  return {
    ImportDeclaration: function ImportDeclaration(node) {
      checkForRestrictedImportPath(node.source.value, node.source);
    },
    CallExpression: function CallExpression(node) {
      if ((0, _staticRequire2.default)(node)) {
        var _node$arguments = node.arguments;
        var firstArgument = _node$arguments[0];


        checkForRestrictedImportPath(firstArgument.value, firstArgument);
      }
    }
  };
};

module.exports.schema = [{
  type: 'object',
  properties: {
    zones: {
      type: 'array',
      minItems: 1,
      items: {
        type: 'object',
        properties: {
          target: { type: 'string' },
          from: { type: 'string' }
        },
        additionalProperties: false
      }
    },
    basePath: { type: 'string' }
  },
  additionalProperties: false
}];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25vLXJlc3RyaWN0ZWQtcGF0aHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLFNBQVMsaUJBQVQsQ0FBMkIsT0FBM0IsRUFBb0M7QUFDbkQsTUFBTSxVQUFVLFFBQVEsT0FBUixDQUFnQixDQUFoQixLQUFzQixFQUF0QixDQURtQztBQUVuRCxNQUFNLGtCQUFrQixRQUFRLEtBQVIsSUFBaUIsRUFBakIsQ0FGMkI7QUFHbkQsTUFBTSxXQUFXLFFBQVEsUUFBUixJQUFvQixRQUFRLEdBQVIsRUFBcEIsQ0FIa0M7QUFJbkQsTUFBTSxrQkFBa0IsUUFBUSxXQUFSLEVBQWxCLENBSjZDO0FBS25ELE1BQU0sZ0JBQWdCLGdCQUFnQixNQUFoQixDQUF1QixVQUFDLElBQUQsRUFBVTtBQUNyRCxRQUFNLGFBQWEsZUFBSyxPQUFMLENBQWEsUUFBYixFQUF1QixLQUFLLE1BQUwsQ0FBcEMsQ0FEK0M7O0FBR3JELFdBQU8sNEJBQWEsZUFBYixFQUE4QixVQUE5QixDQUFQLENBSHFEO0dBQVYsQ0FBdkMsQ0FMNkM7O0FBV25ELFdBQVMsNEJBQVQsQ0FBc0MsVUFBdEMsRUFBa0QsSUFBbEQsRUFBd0Q7QUFDcEQsUUFBTSxxQkFBcUIsdUJBQVEsVUFBUixFQUFvQixPQUFwQixDQUFyQixDQUQ4Qzs7QUFHcEQsUUFBSSxDQUFDLGtCQUFELEVBQXFCO0FBQ3ZCLGFBRHVCO0tBQXpCOztBQUlBLGtCQUFjLE9BQWQsQ0FBc0IsVUFBQyxJQUFELEVBQVU7QUFDOUIsVUFBTSxlQUFlLGVBQUssT0FBTCxDQUFhLFFBQWIsRUFBdUIsS0FBSyxJQUFMLENBQXRDLENBRHdCOztBQUc5QixVQUFJLDRCQUFhLGtCQUFiLEVBQWlDLFlBQWpDLENBQUosRUFBb0Q7QUFDbEQsZ0JBQVEsTUFBUixDQUFlO0FBQ2Isb0JBRGE7QUFFYix5Q0FBNkIsNkNBQTdCO1NBRkYsRUFEa0Q7T0FBcEQ7S0FIb0IsQ0FBdEIsQ0FQb0Q7R0FBeEQ7O0FBbUJBLFNBQU87QUFDTCxrREFBa0IsTUFBTTtBQUN0QixtQ0FBNkIsS0FBSyxNQUFMLENBQVksS0FBWixFQUFtQixLQUFLLE1BQUwsQ0FBaEQsQ0FEc0I7S0FEbkI7QUFJTCw0Q0FBZSxNQUFNO0FBQ25CLFVBQUksNkJBQWdCLElBQWhCLENBQUosRUFBMkI7OEJBQ0MsS0FBSyxTQUFMLENBREQ7WUFDakIsbUNBRGlCOzs7QUFHekIscUNBQTZCLGNBQWMsS0FBZCxFQUFxQixhQUFsRCxFQUh5QjtPQUEzQjtLQUxHO0dBQVAsQ0E5Qm1EO0NBQXBDOztBQTRDakIsT0FBTyxPQUFQLENBQWUsTUFBZixHQUF3QixDQUN0QjtBQUNFLFFBQU0sUUFBTjtBQUNBLGNBQVk7QUFDVixXQUFPO0FBQ0wsWUFBTSxPQUFOO0FBQ0EsZ0JBQVUsQ0FBVjtBQUNBLGFBQU87QUFDTCxjQUFNLFFBQU47QUFDQSxvQkFBWTtBQUNWLGtCQUFRLEVBQUUsTUFBTSxRQUFOLEVBQVY7QUFDQSxnQkFBTSxFQUFFLE1BQU0sUUFBTixFQUFSO1NBRkY7QUFJQSw4QkFBc0IsS0FBdEI7T0FORjtLQUhGO0FBWUEsY0FBVSxFQUFFLE1BQU0sUUFBTixFQUFaO0dBYkY7QUFlQSx3QkFBc0IsS0FBdEI7Q0FsQm9CLENBQXhCIiwiZmlsZSI6InJ1bGVzL25vLXJlc3RyaWN0ZWQtcGF0aHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udGFpbnNQYXRoIGZyb20gJ2NvbnRhaW5zLXBhdGgnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgcmVzb2x2ZSBmcm9tICcuLi9jb3JlL3Jlc29sdmUnXG5pbXBvcnQgaXNTdGF0aWNSZXF1aXJlIGZyb20gJy4uL2NvcmUvc3RhdGljUmVxdWlyZSdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub1Jlc3RyaWN0ZWRQYXRocyhjb250ZXh0KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnNbMF0gfHwge31cbiAgY29uc3QgcmVzdHJpY3RlZFBhdGhzID0gb3B0aW9ucy56b25lcyB8fCBbXVxuICBjb25zdCBiYXNlUGF0aCA9IG9wdGlvbnMuYmFzZVBhdGggfHwgcHJvY2Vzcy5jd2QoKVxuICBjb25zdCBjdXJyZW50RmlsZW5hbWUgPSBjb250ZXh0LmdldEZpbGVuYW1lKClcbiAgY29uc3QgbWF0Y2hpbmdab25lcyA9IHJlc3RyaWN0ZWRQYXRocy5maWx0ZXIoKHpvbmUpID0+IHtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gcGF0aC5yZXNvbHZlKGJhc2VQYXRoLCB6b25lLnRhcmdldClcblxuICAgIHJldHVybiBjb250YWluc1BhdGgoY3VycmVudEZpbGVuYW1lLCB0YXJnZXRQYXRoKVxuICB9KVxuXG4gIGZ1bmN0aW9uIGNoZWNrRm9yUmVzdHJpY3RlZEltcG9ydFBhdGgoaW1wb3J0UGF0aCwgbm9kZSkge1xuICAgICAgY29uc3QgYWJzb2x1dGVJbXBvcnRQYXRoID0gcmVzb2x2ZShpbXBvcnRQYXRoLCBjb250ZXh0KVxuXG4gICAgICBpZiAoIWFic29sdXRlSW1wb3J0UGF0aCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbWF0Y2hpbmdab25lcy5mb3JFYWNoKCh6b25lKSA9PiB7XG4gICAgICAgIGNvbnN0IGFic29sdXRlRnJvbSA9IHBhdGgucmVzb2x2ZShiYXNlUGF0aCwgem9uZS5mcm9tKVxuXG4gICAgICAgIGlmIChjb250YWluc1BhdGgoYWJzb2x1dGVJbXBvcnRQYXRoLCBhYnNvbHV0ZUZyb20pKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmV4cGVjdGVkIHBhdGggXCIke2ltcG9ydFBhdGh9XCIgaW1wb3J0ZWQgaW4gcmVzdHJpY3RlZCB6b25lLmAsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgSW1wb3J0RGVjbGFyYXRpb24obm9kZSkge1xuICAgICAgY2hlY2tGb3JSZXN0cmljdGVkSW1wb3J0UGF0aChub2RlLnNvdXJjZS52YWx1ZSwgbm9kZS5zb3VyY2UpXG4gICAgfSxcbiAgICBDYWxsRXhwcmVzc2lvbihub2RlKSB7XG4gICAgICBpZiAoaXNTdGF0aWNSZXF1aXJlKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IFsgZmlyc3RBcmd1bWVudCBdID0gbm9kZS5hcmd1bWVudHNcblxuICAgICAgICBjaGVja0ZvclJlc3RyaWN0ZWRJbXBvcnRQYXRoKGZpcnN0QXJndW1lbnQudmFsdWUsIGZpcnN0QXJndW1lbnQpXG4gICAgICB9XG4gICAgfSxcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5zY2hlbWEgPSBbXG4gIHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB6b25lczoge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICBtaW5JdGVtczogMSxcbiAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICAgIGZyb206IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBiYXNlUGF0aDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgIH0sXG4gICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICB9LFxuXVxuIl19