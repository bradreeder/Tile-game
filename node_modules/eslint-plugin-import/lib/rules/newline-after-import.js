'use strict';

var _staticRequire = require('../core/staticRequire');

var _staticRequire2 = _interopRequireDefault(_staticRequire);

var _lodash = require('lodash.findindex');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/**
 * @fileoverview Rule to enforce new line after import not followed by another import.
 * @author Radek Benkel
 */

function containsNodeOrEqual(outerNode, innerNode) {
  return outerNode.range[0] <= innerNode.range[0] && outerNode.range[1] >= innerNode.range[1];
}

function getScopeBody(scope) {
  if (scope.block.type === 'SwitchStatement') {
    return [];
  }

  var body = scope.block.body;

  if (body && body.type === 'BlockStatement') {
    return body.body;
  }

  return body;
}

function findNodeIndexInScopeBody(body, nodeToFind) {
  return (0, _lodash2.default)(body, function (node) {
    return containsNodeOrEqual(node, nodeToFind);
  });
}

function getLineDifference(node, nextNode) {
  return nextNode.loc.start.line - node.loc.end.line;
}

module.exports = function (context) {
  var scopes = [];
  var scopeIndex = 0;

  function checkForNewLine(node, nextNode, type) {
    if (getLineDifference(node, nextNode) < 2) {
      var column = node.loc.start.column;

      if (node.loc.start.line !== node.loc.end.line) {
        column = 0;
      }

      context.report({
        loc: {
          line: node.loc.end.line,
          column: column
        },
        message: 'Expected empty line after ' + type + ' statement not followed by another ' + type + '.'
      });
    }
  }

  return {
    ImportDeclaration: function ImportDeclaration(node) {
      var parent = node.parent;

      var nodePosition = parent.body.indexOf(node);
      var nextNode = parent.body[nodePosition + 1];

      if (nextNode && nextNode.type !== 'ImportDeclaration') {
        checkForNewLine(node, nextNode, 'import');
      }
    },
    Program: function Program() {
      scopes.push({ scope: context.getScope(), requireCalls: [] });
    },
    CallExpression: function CallExpression(node) {
      var scope = context.getScope();
      if ((0, _staticRequire2.default)(node)) {
        var currentScope = scopes[scopeIndex];

        if (scope === currentScope.scope) {
          currentScope.requireCalls.push(node);
        } else {
          scopes.push({ scope: scope, requireCalls: [node] });
          scopeIndex += 1;
        }
      }
    },
    'Program:exit': function ProgramExit() {
      scopes.forEach(function (_ref) {
        var scope = _ref.scope;
        var requireCalls = _ref.requireCalls;

        requireCalls.forEach(function (node, index) {
          var scopeBody = getScopeBody(scope);
          var nodePosition = findNodeIndexInScopeBody(scopeBody, node);
          var statementWithRequireCall = scopeBody[nodePosition];
          var nextStatement = scopeBody[nodePosition + 1];
          var nextRequireCall = requireCalls[index + 1];

          if (nextRequireCall && containsNodeOrEqual(statementWithRequireCall, nextRequireCall)) {
            return;
          }

          if (nextStatement && (!nextRequireCall || !containsNodeOrEqual(nextStatement, nextRequireCall))) {

            checkForNewLine(statementWithRequireCall, nextStatement, 'require');
          }
        });
      });
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25ld2xpbmUtYWZ0ZXItaW1wb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsU0FBUyxtQkFBVCxDQUE2QixTQUE3QixFQUF3QyxTQUF4QyxFQUFtRDtBQUMvQyxTQUFPLFVBQVUsS0FBVixDQUFnQixDQUFoQixLQUFzQixVQUFVLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBdEIsSUFBNEMsVUFBVSxLQUFWLENBQWdCLENBQWhCLEtBQXNCLFVBQVUsS0FBVixDQUFnQixDQUFoQixDQUF0QixDQURKO0NBQW5EOztBQUlBLFNBQVMsWUFBVCxDQUFzQixLQUF0QixFQUE2QjtBQUN6QixNQUFJLE1BQU0sS0FBTixDQUFZLElBQVosS0FBcUIsaUJBQXJCLEVBQXdDO0FBQzFDLFdBQU8sRUFBUCxDQUQwQztHQUE1Qzs7TUFJUSxPQUFTLE1BQU0sS0FBTixDQUFULEtBTGlCOztBQU16QixNQUFJLFFBQVEsS0FBSyxJQUFMLEtBQWMsZ0JBQWQsRUFBZ0M7QUFDeEMsV0FBTyxLQUFLLElBQUwsQ0FEaUM7R0FBNUM7O0FBSUEsU0FBTyxJQUFQLENBVnlCO0NBQTdCOztBQWFBLFNBQVMsd0JBQVQsQ0FBa0MsSUFBbEMsRUFBd0MsVUFBeEMsRUFBb0Q7QUFDaEQsU0FBTyxzQkFBVSxJQUFWLEVBQWdCLFVBQUMsSUFBRDtXQUFVLG9CQUFvQixJQUFwQixFQUEwQixVQUExQjtHQUFWLENBQXZCLENBRGdEO0NBQXBEOztBQUlBLFNBQVMsaUJBQVQsQ0FBMkIsSUFBM0IsRUFBaUMsUUFBakMsRUFBMkM7QUFDekMsU0FBTyxTQUFTLEdBQVQsQ0FBYSxLQUFiLENBQW1CLElBQW5CLEdBQTBCLEtBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxJQUFiLENBRFE7Q0FBM0M7O0FBS0EsT0FBTyxPQUFQLEdBQWlCLFVBQVUsT0FBVixFQUFtQjtBQUNsQyxNQUFNLFNBQVMsRUFBVCxDQUQ0QjtBQUVsQyxNQUFJLGFBQWEs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b250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBSdWxlIHRvIGVuZm9yY2UgbmV3IGxpbmUgYWZ0ZXIgaW1wb3J0IG5vdCBmb2xsb3dlZCBieSBhbm90aGVyIGltcG9ydC5cbiAqIEBhdXRob3IgUmFkZWsgQmVua2VsXG4gKi9cblxuaW1wb3J0IGlzU3RhdGljUmVxdWlyZSBmcm9tICcuLi9jb3JlL3N0YXRpY1JlcXVpcmUnXG5pbXBvcnQgZmluZEluZGV4IGZyb20gJ2xvZGFzaC5maW5kaW5kZXgnXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBSdWxlIERlZmluaXRpb25cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZU9yRXF1YWwob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLnJhbmdlWzBdIDw9IGlubmVyTm9kZS5yYW5nZVswXSAmJiBvdXRlck5vZGUucmFuZ2VbMV0gPj0gaW5uZXJOb2RlLnJhbmdlWzFdXG59XG5cbmZ1bmN0aW9uIGdldFNjb3BlQm9keShzY29wZSkge1xuICAgIGlmIChzY29wZS5ibG9jay50eXBlID09PSAnU3dpdGNoU3RhdGVtZW50Jykge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgY29uc3QgeyBib2R5IH0gPSBzY29wZS5ibG9ja1xuICAgIGlmIChib2R5ICYmIGJvZHkudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuICAgICAgICByZXR1cm4gYm9keS5ib2R5XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvZHlcbn1cblxuZnVuY3Rpb24gZmluZE5vZGVJbmRleEluU2NvcGVCb2R5KGJvZHksIG5vZGVUb0ZpbmQpIHtcbiAgICByZXR1cm4gZmluZEluZGV4KGJvZHksIChub2RlKSA9PiBjb250YWluc05vZGVPckVxdWFsKG5vZGUsIG5vZGVUb0ZpbmQpKVxufVxuXG5mdW5jdGlvbiBnZXRMaW5lRGlmZmVyZW5jZShub2RlLCBuZXh0Tm9kZSkge1xuICByZXR1cm4gbmV4dE5vZGUubG9jLnN0YXJ0LmxpbmUgLSBub2RlLmxvYy5lbmQubGluZVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgY29uc3Qgc2NvcGVzID0gW11cbiAgbGV0IHNjb3BlSW5kZXggPSAwXG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JOZXdMaW5lKG5vZGUsIG5leHROb2RlLCB0eXBlKSB7XG4gICAgaWYgKGdldExpbmVEaWZmZXJlbmNlKG5vZGUsIG5leHROb2RlKSA8IDIpIHtcbiAgICAgIGxldCBjb2x1bW4gPSBub2RlLmxvYy5zdGFydC5jb2x1bW5cblxuICAgICAgaWYgKG5vZGUubG9jLnN0YXJ0LmxpbmUgIT09IG5vZGUubG9jLmVuZC5saW5lKSB7XG4gICAgICAgIGNvbHVtbiA9IDBcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgICBsb2M6IHtcbiAgICAgICAgICBsaW5lOiBub2RlLmxvYy5lbmQubGluZSxcbiAgICAgICAgICBjb2x1bW4sXG4gICAgICAgIH0sXG4gICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCBlbXB0eSBsaW5lIGFmdGVyICR7dHlwZX0gc3RhdGVtZW50IG5vdCBmb2xsb3dlZCBieSBhbm90aGVyICR7dHlwZX0uYCxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBJbXBvcnREZWNsYXJhdGlvbjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGNvbnN0IHsgcGFyZW50IH0gPSBub2RlXG4gICAgICBjb25zdCBub2RlUG9zaXRpb24gPSBwYXJlbnQuYm9keS5pbmRleE9mKG5vZGUpXG4gICAgICBjb25zdCBuZXh0Tm9kZSA9IHBhcmVudC5ib2R5W25vZGVQb3NpdGlvbiArIDFdXG5cbiAgICAgIGlmIChuZXh0Tm9kZSAmJiBuZXh0Tm9kZS50eXBlICE9PSAnSW1wb3J0RGVjbGFyYXRpb24nKSB7XG4gICAgICAgIGNoZWNrRm9yTmV3TGluZShub2RlLCBuZXh0Tm9kZSwgJ2ltcG9ydCcpXG4gICAgICB9XG4gICAgfSxcbiAgICBQcm9ncmFtOiBmdW5jdGlvbiAoKSB7XG4gICAgICBzY29wZXMucHVzaCh7IHNjb3BlOiBjb250ZXh0LmdldFNjb3BlKCksIHJlcXVpcmVDYWxsczogW10gfSlcbiAgICB9LFxuICAgIENhbGxFeHByZXNzaW9uOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBjb25zdCBzY29wZSA9IGNvbnRleHQuZ2V0U2NvcGUoKVxuICAgICAgaWYgKGlzU3RhdGljUmVxdWlyZShub2RlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBzY29wZXNbc2NvcGVJbmRleF1cblxuICAgICAgICBpZiAoc2NvcGUgPT09IGN1cnJlbnRTY29wZS5zY29wZSkge1xuICAgICAgICAgIGN1cnJlbnRTY29wZS5yZXF1aXJlQ2FsbHMucHVzaChub2RlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjb3Blcy5wdXNoKHsgc2NvcGUsIHJlcXVpcmVDYWxsczogWyBub2RlIF0gfSlcbiAgICAgICAgICBzY29wZUluZGV4ICs9IDFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ1Byb2dyYW06ZXhpdCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNjb3Blcy5mb3JFYWNoKGZ1bmN0aW9uICh7IHNjb3BlLCByZXF1aXJlQ2FsbHMgfSkge1xuICAgICAgICByZXF1aXJlQ2FsbHMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSwgaW5kZXgpIHtcbiAgICAgICAgICBjb25zdCBzY29wZUJvZHkgPSBnZXRTY29wZUJvZHkoc2NvcGUpXG4gICAgICAgICAgY29uc3Qgbm9kZVBvc2l0aW9uID0gZmluZE5vZGVJbmRleEluU2NvcGVCb2R5KHNjb3BlQm9keSwgbm9kZSlcbiAgICAgICAgICBjb25zdCBzdGF0ZW1lbnRXaXRoUmVxdWlyZUNhbGwgPSBzY29wZUJvZHlbbm9kZVBvc2l0aW9uXVxuICAgICAgICAgIGNvbnN0IG5leHRTdGF0ZW1lbnQgPSBzY29wZUJvZHlbbm9kZVBvc2l0aW9uICsgMV1cbiAgICAgICAgICBjb25zdCBuZXh0UmVxdWlyZUNhbGwgPSByZXF1aXJlQ2FsbHNbaW5kZXggKyAxXVxuXG4gICAgICAgICAgaWYgKG5leHRSZXF1aXJlQ2FsbCAmJiBjb250YWluc05vZGVPckVxdWFsKHN0YXRlbWVudFdpdGhSZXF1aXJlQ2FsbCwgbmV4dFJlcXVpcmVDYWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5leHRTdGF0ZW1lbnQgJiZcbiAgICAgICAgICAgICAoIW5leHRSZXF1aXJlQ2FsbCB8fCAhY29udGFpbnNOb2RlT3JFcXVhbChuZXh0U3RhdGVtZW50LCBuZXh0UmVxdWlyZUNhbGwpKSkge1xuXG4gICAgICAgICAgICBjaGVja0Zvck5ld0xpbmUoc3RhdGVtZW50V2l0aFJlcXVpcmVDYWxsLCBuZXh0U3RhdGVtZW50LCAncmVxdWlyZScpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LFxuICB9XG59XG4iXX0=